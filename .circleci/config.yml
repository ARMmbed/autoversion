# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.0
        environment:
          PIPENV_VENV_IN_PROJECT: true

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          # TODO: consider using pipenv
          command: |
            pip install pipenv
            pipenv install --dev .

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: autoformat
          command: |
            pipenv run black src

      - run:
          name: run tests
          command: |
            pipenv run green src

      - run:
          name: run static analysis
          command: |
            pipenv run flake8 src

      - store_artifacts:
          path: test-reports
          destination: test-reports
  release:
    docker:
      - image: circleci/python:3.7.0
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-

      - run:
          name: install dependencies
          # TODO: consider using pipenv
          command: |
            pip install pipenv setuptools twine<1.12
            pipenv install --dev .

      - save_cache:
          paths:
            - ./venv
          key: v2-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: autoversion
          command: |
            pipenv run auto_version --config=autoversion.toml --set-patch-count --release

      - run:
          name: generate a release package
          command: |
            pipenv run python setup.py clean --all bdist_wheel --dist-dir release-dist

      - run:
          name: upload to pypi
          command: |
            pipenv run python -m twine upload release-dist/*

workflows:
  version: 2
  autoversion_workflow:
    jobs:
      - build
      - release_gate:
          type: approval
          filters:
            branches:
              only: f/pypi
          requires:
            - build
      - release:
          requires:
            - release_gate
